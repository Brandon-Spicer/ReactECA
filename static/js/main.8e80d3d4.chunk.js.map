{"version":3,"sources":["components/Button.js","components/Square.js","components/ButtonSquare.js","components/Grid.js","components/RuleForm.js","components/App.js","index.js"],"names":["Button","props","className","onClick","label","Square","color","alive","style","ButtonSquare","this","React","Component","Grid","rows","view","length","cols","viewIter","iteration","gridList","i","rowList","buttonsIndex","Math","min","j","push","key","toString","renderSquares","RuleForm","state","value","handleChange","bind","handleSubmit","event","setState","target","onSubmit","preventDefault","type","width","onChange","App","rule","ruleMap","Array","history","nRow","nCell","seed","fill","floor","forward","rewind","steps","currState","nextState","slice","hood","ruleIndex","concat","newRule","parseInt","newHist","newView","nRows","changeSquare","ruleChange","JumpToStart","JumpToEnd","reset","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e80d3d4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Button(props) {\r\n    return (\r\n      <button className={props.className} onClick={props.onClick}>\r\n        {props.label}\r\n      </button>\r\n    );\r\n  }\r\n\r\nexport default Button","import React from 'react';\r\n\r\nfunction Square(props) {\r\n    let color = props.alive? \"#ff5638\": \"white\";\r\n    return (\r\n      <div \r\n        className=\"square\"\r\n        style={{\r\n          \"background-color\": color, \r\n          \"box-sizing\": \"border-box\"\r\n        }}\r\n      >\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Square;","import React from 'react';\r\n\r\n\r\nclass ButtonSquare extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <button\r\n          className=\"buttonSquare\"\r\n          style={{\"background-color\": this.props.alive? \"#ff5638\": \"#e0e0e0\"}}\r\n          onClick={this.props.onClick}\r\n        >\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default ButtonSquare;","import React from 'react';\r\nimport Square from './Square';\r\nimport ButtonSquare from './ButtonSquare';\r\n\r\nclass Grid extends React.Component {\r\n    renderSquares() {\r\n      const rows = this.props.view.length;\r\n      const cols = this.props.view[0].length;\r\n      const viewIter = this.props.viewIter;\r\n      const iteration = this.props.iteration;\r\n  \r\n      let gridList = [];\r\n  \r\n      for (let i=0; i<rows; i++) {\r\n        let rowList = []\r\n        let buttonsIndex = Math.min(viewIter-1, rows-1);\r\n  \r\n        // condition for making a button row\r\n        if (((viewIter == iteration)) && (i == buttonsIndex)) {\r\n          // insert a row of buttons\r\n          for (let j=0; j<cols; j++) {\r\n            rowList.push(\r\n              <ButtonSquare\r\n                key={(i*10 + j).toString()}\r\n                alive={this.props.view[i][j]}\r\n                onClick={() => this.props.onClick(j)}\r\n              />\r\n            );\r\n          }\r\n        } else {\r\n          // make non-clickable square row\r\n          for (let j=0; j<cols; j++) {\r\n            rowList.push(\r\n              <Square\r\n                key={(i*10 + j).toString()}\r\n                alive={this.props.view[i][j]}\r\n              />\r\n            );\r\n          }\r\n        }\r\n  \r\n        gridList.push(<div className=\"row\">{rowList}</div>);\r\n      }\r\n  \r\n      return (gridList);\r\n    }\r\n  \r\n    render() {\r\n      return (this.renderSquares());\r\n    }\r\n  }\r\n\r\n\r\nexport default Grid","import React from \"react\";\r\n\r\nclass RuleForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"126\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    // pass this.state.value into a function passed as a prop that updates ECA state\r\n    this.props.onSubmit(this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.value}\r\n          style={{ width: \"30px\" }}\r\n          onChange={this.handleChange}\r\n        />\r\n        <input type=\"submit\" value=\"submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RuleForm;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport Grid from \"./Grid\";\r\nimport RuleForm from \"./RuleForm\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rule: 126,\r\n      ruleMap: Array(8),\r\n      history: [],\r\n      view: [],\r\n      iteration: 1,\r\n      viewIter: 1,\r\n      nRow: 40,\r\n      nCell: 80,\r\n    };\r\n\r\n    let nRow = this.state.nRow;\r\n    let nCell = this.state.nCell;\r\n\r\n    // create initial state\r\n    const seed = Array(nCell).fill(0);\r\n    seed[Math.floor(nCell / 2)] = 1;\r\n\r\n    // add to history\r\n    this.state.history[0] = seed;\r\n\r\n    // create view array\r\n    this.state.view[0] = seed;\r\n    for (let i = 1; i < nRow; i++) {\r\n      this.state.view.push(Array(nCell).fill(0));\r\n    }\r\n\r\n    // create ruleMap\r\n    for (let i = 0; i < 8; i++) {\r\n      this.state.ruleMap[i] = Math.floor(this.state.rule / 2 ** i) % 2;\r\n    }\r\n\r\n    this.forward = this.forward.bind(this);\r\n    this.rewind = this.rewind.bind(this);\r\n  }\r\n\r\n  forward(steps = 1) {\r\n    let iteration = this.state.iteration;\r\n    let viewIter = this.state.viewIter;\r\n    let history = this.state.history;\r\n    let view = this.state.view;\r\n    const nRow = this.state.nRow;\r\n    let currState = history[history.length - 1];\r\n    let nextState = currState.slice();\r\n\r\n    for (let i = 0; i < steps; i++) {\r\n      // if viewIter == iteration, calcNext\r\n      // else, update viewIter and view\r\n      if (viewIter == iteration) {\r\n        // calculate the next state\r\n        for (let i = 0; i < currState.length; i++) {\r\n          let hood = [];\r\n\r\n          // left\r\n          if (i === 0) {\r\n            hood[0] = currState[currState.length - 1];\r\n          } else {\r\n            hood[0] = currState[i - 1];\r\n          }\r\n          // center\r\n          hood[1] = currState[i];\r\n          // right\r\n          if (i === currState.length - 1) {\r\n            hood[2] = currState[0];\r\n          } else {\r\n            hood[2] = currState[i + 1];\r\n          }\r\n\r\n          // calculate nextState[i]\r\n          // hood -> [binary to dec] -> ruleIndex -> [ruleMap] -> nextState[i]\r\n          let ruleIndex = hood[0];\r\n          ruleIndex += hood[1] * 2;\r\n          ruleIndex += hood[2] * 4;\r\n          nextState[i] = this.state.ruleMap[ruleIndex];\r\n        }\r\n\r\n        // update local vars\r\n        if (iteration < nRow) {\r\n          view[iteration] = nextState;\r\n        } else {\r\n          view = view.slice(1).concat([nextState]);\r\n        }\r\n        history = history.concat([nextState]);\r\n        currState = history[history.length - 1];\r\n        nextState = currState.slice();\r\n\r\n        iteration += 1;\r\n        viewIter += 1;\r\n      } else {\r\n        viewIter += 1;\r\n        view = history.slice(viewIter - nRow, viewIter);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      view: view,\r\n      history: history,\r\n      viewIter: viewIter,\r\n      iteration: iteration,\r\n    });\r\n  }\r\n\r\n  rewind(steps = 1) {\r\n    let viewIter = this.state.viewIter;\r\n    let history = this.state.history;\r\n    let view = this.state.view;\r\n    const nRow = this.state.nRow;\r\n\r\n    for (let i = 0; i < steps; i++) {\r\n      if (viewIter > nRow) {\r\n        viewIter -= 1;\r\n        view = history.slice(viewIter - nRow, viewIter);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      view: view,\r\n      viewIter: viewIter,\r\n    });\r\n  }\r\n\r\n  JumpToStart() {\r\n    let history = this.state.history;\r\n    const nRow = this.state.nRow;\r\n    const viewIter = this.state.viewIter;\r\n\r\n    if (viewIter > nRow) {\r\n      this.setState({\r\n        view: history.slice(0, nRow),\r\n        viewIter: nRow,\r\n      });\r\n    }\r\n  }\r\n\r\n  JumpToEnd() {\r\n    let history = this.state.history;\r\n    const nRow = this.state.nRow;\r\n    const viewIter = this.state.viewIter;\r\n\r\n    if (viewIter >= nRow) {\r\n      this.setState({\r\n        view: history.slice(history.length - nRow, history.length),\r\n        viewIter: history.length,\r\n      });\r\n    }\r\n  }\r\n\r\n  ruleChange(newRule) {\r\n    let ruleMap = this.state.ruleMap;\r\n\r\n    // update ruleMap\r\n    for (let i = 0; i < 8; i++) {\r\n      ruleMap[i] = Math.floor(newRule / 2 ** i) % 2;\r\n    }\r\n    this.setState({\r\n      rule: parseInt(newRule),\r\n      ruleMap: ruleMap,\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    const history = this.state.history;\r\n    const nRow = this.state.nRow;\r\n    const nCell = this.state.nCell;\r\n\r\n    let newHist = history.slice(0, 1);\r\n    let newView = history.slice(0, 1);\r\n    for (let i = 1; i < nRow; i++) {\r\n      newView[i] = Array(nCell).fill(0);\r\n    }\r\n\r\n    this.setState({\r\n      history: newHist,\r\n      iteration: 1,\r\n      viewIter: 1,\r\n      view: newView,\r\n    });\r\n  }\r\n\r\n  changeSquare(j) {\r\n    const viewIter = this.state.viewIter;\r\n    const nRows = this.state.nRows;\r\n    let view = this.state.view;\r\n    let history = this.state.history;\r\n    let currState = history[history.length - 1];\r\n\r\n    // change the jth button in the row at i == buttonsIndex\r\n    let buttonsIndex = Math.min(this.state.viewIter - 1, this.state.nRows - 1);\r\n    // modify history and view\r\n    currState[j] = 1 ^ currState[j];\r\n\r\n    view[buttonsIndex] = currState;\r\n    history[history.length - 1] = currState;\r\n\r\n    this.setState({\r\n      history: history,\r\n      view: view,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"content-wrapper\">\r\n        <div className=\"grid\">\r\n          <Grid\r\n            view={this.state.view}\r\n            viewIter={this.state.viewIter}\r\n            iteration={this.state.iteration}\r\n            onClick={(j) => this.changeSquare(j)}\r\n          />\r\n        </div>\r\n        <div className=\"button-wrapper clearfix\">\r\n          <div className=\"formContainer\">\r\n            <RuleForm onSubmit={(newRule) => this.ruleChange(newRule)} />\r\n          </div>\r\n          <Button\r\n            className=\"controlButton\"\r\n            label=\"Next\"\r\n            onClick={() => this.forward()}\r\n          />\r\n          <Button\r\n            className=\"controlButton\"\r\n            label=\"Back\"\r\n            onClick={() => this.rewind()}\r\n          />\r\n          <Button\r\n            className=\"controlButton\"\r\n            label=\"Next 10\"\r\n            onClick={() => this.forward(10)}\r\n          />\r\n          <Button\r\n            className=\"controlButton\"\r\n            label=\"Back 10\"\r\n            onClick={() => this.rewind(10)}\r\n          />\r\n          <Button\r\n            className=\"controlButton\"\r\n            label=\"Jump to start\"\r\n            onClick={() => this.JumpToStart()}\r\n          />\r\n          <Button\r\n            className=\"controlButton\"\r\n            label=\"Jump to end\"\r\n            onClick={() => this.JumpToEnd()}\r\n          />\r\n          <Button\r\n            className=\"controlButton\"\r\n            label=\"Reset\"\r\n            onClick={() => this.reset()}\r\n          />\r\n        </div>\r\n        <div className=\"infoContainer\">\r\n          <table>\r\n            <tr>\r\n              <td>Rule:</td>\r\n              <td>{this.state.rule}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Gens:</td>\r\n              <td>{this.state.iteration}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Index:</td>\r\n              <td>{this.state.viewIter}</td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}